#basic parameters
parent.0 = base.params

# Specify datasets to use(folder names)
eval.problem.learningDatasets = dataset_1
eval.problem.crossValidationDatasets = dataset_2, dataset_3,dataset_4, dataset_5

# Specify how many random resolution must be generated
eval.problem.amountOfRandoms = 1000000

# Specify if best results from WEB should be readed from upper or lower bound
eval.problem.useUpperBound = true

#max generations number
generations = 1000

#################### Parameters to compare

# fitness evaluation type                           (1,2)
# 1 - difference in % between calculated makespan and makespan from web
# 2 - median of all calculated makespans
eval.problem.fitnessType = 2

#size of single generation                          (500, 750, 1000(d), 1500, 2000 )
pop.subpop.0.size = 1000

#size of a tournament                               (2, 3, 4, 5(d), 6, 7, 8)
select.tournament.size = 5

pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.generate-max = false
# % just copy to new generation                     (0.2, 0.2, 0.15, 0.1(d), 0.05, 0)
pop.subpop.0.species.pipe.source.0 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.10
# % crossover                                       (0.5, 0.6, 0.7,  0.8(d), 0.9,  1.0)
pop.subpop.0.species.pipe.source.1 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.80
# % mutation                                        (0.3, 0.2, 0.15, 0.1(d), 0.05, 0)
pop.subpop.0.species.pipe.source.2 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.10

# HalfBuilder
# min                                               (1, 1, 2, 3(d), 4, 5, 6, 7)
gp.koza.half.min-depth = 5 
# max #                                             (3, 4, 5, 6(d), 7, 8, 9, 10)
gp.koza.half.max-depth = 8 
gp.koza.half.growp = 0.5

######################


