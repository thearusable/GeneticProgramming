# Copyright 2012 by James McDermott
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

# one simple function set. Can cut it down by setting (eg) gp.fs.0.size = 4
gp.fs.size = 1
gp.fs.0.name = f0
gp.fs.0.size = 3
gp.fs.0.func.0 = JobsScheduling.JobTreeNode
gp.fs.0.func.0.nc = nc0
gp.fs.0.func.1 = JobsScheduling.JobTreeNode
gp.fs.0.func.1.nc = nc1
gp.fs.0.func.2 = JobsScheduling.JobTreeNode
gp.fs.0.func.2.nc = nc2

# problem specification
eval.problem = JobsScheduling.JobsSchedulingProblem
eval.problem.data = ec.gp.GPData

stat.file       = $src\\JobsScheduling\\jobs.stat

# 0 means add a unit for each correct node
# 1 means add the node's value
# 2 means add the node's value squared
# 3 means add 3 ^ node value
eval.problem.contribution-type = 0

# parameters are as specified in Hoang et al.

# koza.params brings in 90/10 crossover, replication 0.1, ramped half
# and half initialisation from depths 2 to 6. We override a few koza
# values.

parent.0 = ../ecj/ec/gp/koza/koza.params

# Tournament selection size
select.tournament.size = 6

# we switch off replication and use mutation instead with probability 0.1
pop.subpop.0.species.pipe.source.1 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.1

# override max initialisation depth:
gp.koza.half.max-depth = 6

pop.subpop.0.species.fitness = ec.simple.SimpleFitness

gp.koza.xover.maxdepth = 20
gp.koza.mutate.maxdepth = 20

generations = 201
pop.subpop.0.size = 500

